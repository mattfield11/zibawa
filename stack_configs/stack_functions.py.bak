from __future__ import print_function
from __future__ import absolute_import
from django.http import Http404
from django.shortcuts import render
from django.conf import settings
from django.shortcuts import redirect
from django.contrib.auth.decorators import login_required

from .models import sendToRabbitMQ
from .models import sendToRabbitMQ, getFromGrafanaApi, patchToGrafanaApi,postToGrafanaApi, deleteFromGrafanaApi, getInfluxConnection
import random
import string

import logging
logger = logging.getLogger(__name__)  

class testObj:

    def __init__(self, name,status,message):
        self.name = name
        self.status = status
        self.message= message

      

def constructStatusList(request):
    #statusList is list of status with error messages also used in device/testMessage view

    rabbitMQTest=testConnectToRabbitMQ 
    grafanaUpTest=testGrafanaUp 
    orgID= getGrafanaOrg(request.user)
    if not(isinstance(orgID, ( int, long ) )):
        grafanaOrgTest=testObj("GrafanaLogIn","Failed","You need to sign in to Grafana Dashboard for the first time before it can be configured")
        status_list=(rabbitMQTest,grafanaUpTest,grafanaOrgTest)
    else:
        influxTest=testInfluxDB(request.user)
        grafanaOrgTest=testObj("GrafanaLogIn","OK","")   
        grafanaDataSourceTest=addDataBaseToGrafana(influxTest,orgID,request.user) 
        status_list=(rabbitMQTest,grafanaUpTest,grafanaOrgTest,influxTest,grafanaDataSourceTest)
    
        return status_list
    
def testConnectToRabbitMQ():
        
    
    try: 
        result=sendToRabbitMQ('health.admin.test','testMessage')
        output= testObj("rabbitMQ","OK","")
    except Exception as e: #return str(e)
        #this is not sending any string as e dont know why
        output= testObj("rabbitMQ","Failed","Contact your administrator, Grafana could not contact rabbitMQ")
        logger.critical('couldnt connect to rabbitMQ %s,', e)
            
    return output

def testGrafanaUp():
    try:
        data={}
        apiurl="/api/org"
        result=getFromGrafanaApi(apiurl, data)
        output=testObj("Grafana Running","OK","")
    except Exception as e:
        output=testObj("Grafana Running", "Failed","Contact your administrator, Zibawa cannot contact Grafana")
        logger.critical('could not connect to Grafana %s',e)
    return output

def getGrafanaOrg(current_user):    
    
    
    #get orgID whose name is equal to email for the current user
    #if fails returns error string
    orgID=0
    apiurl="/api/orgs/name/"+str(current_user.email)
    data={}
    #delete get from grafanaapi before production
    result=getFromGrafanaApi(apiurl,data) 
    try:
        result=getFromGrafanaApi(apiurl,data)    
        orgID=result['id']
        return orgID
    except Exception as e: 
        logger.critical('Couldnt find Grafana Organization %s,', e)
        return str(e)

    
def addDataBaseToGrafana(influxTest,orgId,current_user):

#adds influxDB datasource to Grafana organization based on array of credentials
 
 
 #get Grafana userID (ignore master Admin)
    
    apiurl="/api/orgs/"+str(orgId)+"/users"
    data={}
    results=getFromGrafanaApi(apiurl,data) 
    for result in results:
        #check if the login of the grafana user is the login of super user as defined in settings.py
        if not (result['login']==settings.DASHBOARD['user']):
            grafanaUser=result['userId']
#get Grafana Datasource by name
    
    data={}
    apiurl="/api/datasources/name/"+str(influxTest.database)
    result=getFromGrafanaApi(apiurl,data) 
    print(result)   
    if not result or not 'database' in result:
        #create the datasource
#add Admin user to the user-specific organization
        try:
            
            data={
                "loginOrEmail":settings.DASHBOARD['user'],
                "role":"Admin"
                }
            apiurl="/api/orgs/"+str(orgId)+"/users"
            result=postToGrafanaApi(apiurl,data)
                
    #change admin level of user back to editor (grafana creates users with admin level)
   
    
    
            apiurl="/api/orgs/"+str(orgId)+"/users/"+str(grafanaUser)
            data={"role":"Editor"}
            result=patchToGrafanaApi(apiurl,data)
        #change active organization (empty data array)
            data={}
            apiurl="/api/user/using/"+str(orgId)
            result=postToGrafanaApi(apiurl,data)
         
        #add datasource to organization
            DBusername="dab"+str(current_user.username)
            DBpassword=id_generator()
            #createInfluxReadOnlyUser for database
            client=getInfluxConnection()
            result=client.create_user(DBusername, DBpassword, admin=False)
            result=client.grant_privilege('read',influxTest.database,DBusername)
        
            apiurl= "/api/datasources"
            data={}
            data['name']=influxTest.database
            data['type']="influxdb"
            data['url']="http://localhost:8086"
            data['access']="proxy"
            data['basicAuth']=False
            data['password']=DBpassword
            data['user']= DBusername
            data['database']=influxTest.database
        
            result=postToGrafanaApi(apiurl,data)
            output= testObj("Grafana Data Source","OK",influxTest.database)
        except Exception as e: 
            
            message= "Database:"+str(influxTest.database)
            logger.warning('Couldnt add datasource to Grafana Organization %s,', e)
            output= testObj("Grafana Data Source","Failed",message)
    elif result['database']==influxTest.database:
          
            output=testObj("Grafana Data Source","OK", influxTest.database)
    else:
        message="unexpected datasource"+str(result['database'])
        output=testObj("Grafana Data Source","Error",message)                

   
    
    return output
   
   
def testInfluxDB(current_user):
    #creates new database and read only user
    #returns db name and credentials in array

    output=testObj("influxDB","unknown","")
    output.database="dab"+str(current_user.id)
   
    try:
        client=getInfluxConnection()
        result=client.create_database(output.database)
        if not result:
            output.status="OK"
            output.message="UserDatabase on-line"
    
     #   credentials['database']=output.database
     #   credentials['dbusername']=dbusername
     #   credentials['dbpassword']=dbpassword
     #   credentials['success']=True
        
    except Exception as e: 
        logger.warning('Couldnt create influxDB %s,', e)
        output.message='Could not create influxDB'
        output.status='Failure'
        #credentials['success']=False
                
    return output
    
    

def id_generator(size=10, chars=string.ascii_uppercase + string.digits):
    '''need to add tags to database!!!!'''
    return ''.join(random.choice(chars) for _ in range(size))

    


    